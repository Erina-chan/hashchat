#!/usr/bin/env python3
from time import sleep
from datetime import datetime
from random import random
from subprocess import run
import json
from Crypto.Hash import SHA256

from src.ui import *
from src.keys import login
import src.socks as socks
from src.contacts import load_contacts, save_contacts, display_contact, display_convo, display_messages
from src.fingerprints import create_fingerprint 
from src.hashchain import message_x, verify_prev_hash
from src.block import *


class Application:
    def __init__(self, public, private, public_ecdh, private_ecdh):
        self.public = public
        self.private = private
        self.public_ecdh = public_ecdh
        self.private_ecdh = private_ecdh


    def run(self):
        while True:
            try:
                self.main_menu()
            except KeyboardInterrupt:
                self.quit()


    def main_menu(self):
        """
        Runs the main loop of the program, where the user enters commands.
        
        Args:
            public: The user's public RSA key loaded from login().
            private: The user's private RSA key loaded from login().
            public_ecdh: The user's public ECDH key loaded from login().
            private_ecdh: The user's private ECDH key loaded from login().
        """
        self.display_help()
        commands = {"oc": self.open_conversation, 
                    "ec": self.edit_conversation,
                    "nc": self.new_contact, 
                    "lc": self.list_contacts,
                    "dc": self.delete_contact,
                    "fp": self.get_fingerprint,
                    "c" : self.clear_screen,
                    "h" : self.display_help,
                    "q" : self.quit 
                    }

        while True:
            command = get_command(commands)
            self.handle_context(commands[command])


    def open_conversation(self):
        """
        Walks the user through creating a message, and sends the completed message.
        """
        contacts = load_contacts(self.private)
        print_bar("VIEW CONVERSATION")
        display_messages(contacts)
        contact_id = get_recipient(contacts)
        verify_fingerprints = True

        while True:
            contacts = load_contacts(self.private)
            display_convo(contacts[contact_id])

            if not verify_fingerprints:
                print_yellow("Fingerprint verification disabled.")
            message = input("Message: ").encode()

            if len(message.decode()) > 0:
                try:
                    seed = socks.transmit(contacts[contact_id], message, self.public, self.private, self.private_ecdh, self.public_ecdh ,check_fingerprint=verify_fingerprints)
                
                except socket.error as e:
                    print_red("Error: Failed to connect to contact. Transmission cancelled.\n")
                    break
                
                except socket.timeout:
                    print_red("Error: Connection timed out. Transmission incomplete.\n")
                    break

                except AssertionError:
                    print_yellow("\nWARNING: Contact fingerprint does not match. Transmission cancelled.")
                    print("Either your contact has changed keys, or something may be going on.")
                    print("Confirm with them over a secure channel.\n")

                    if confirm("Temporarily disable fingerprint verification? (Y/n) "):
                        verify_fingerprints = False
                    else:
                        print_green("Aborted.\n")
                        break

                else:
                    message_receipt = { "time": datetime.now().strftime("%m/%d/%y %I:%M%p"), 
                                        "recieved": False, 
                                        "contents": message.decode()}
                    contacts[contact_id]["messages"].append(message_receipt)
                    if (contacts[contact_id]["counter"] == 0):
                        prev_hash = "0000000000000000000000000000000000000000000000000000000000000000"
                    else:
                        prev_hash = contacts[contact_id]["hashchain"][-1]["prev_hash"]
                    contacts[contact_id]["counter"] = contacts[contact_id]["counter"] + 1
                    msg_x = message_x(seed=seed, counter=contacts[contact_id]["counter"], msg=message)
                    message_block = { "prev_hash": prev_hash,
                                      "message_x": msg_x}
                    contacts[contact_id]["hashchain"].append(message_block) 
                    save_contacts(contacts, private)
                    print_green("Message delivered successfully.\n")


    def edit_conversation(self):
        """
        Walks the user through deleting a message from local database.
        This is just a test to edit a local saved chat.
        """
        contacts = load_contacts(self.private)
        print_bar("VIEW CONVERSATION")
        display_messages(contacts)
        contact_id = get_recipient(contacts)
        verify_fingerprints = True

        display_convo(contacts[contact_id])

        if not verify_fingerprints:
            print_yellow("Fingerprint verification disabled.")
        message = input("Message: ").encode()

        message_receipt = { "time": datetime.now().strftime("%m/%d/%y %I:%M%p"), 
                            "recieved": False, 
                            "contents": message.decode()}
        contacts[contact_id]["messages"].pop(1)
        contacts[contact_id]["messages"].insert(4, message_receipt)
        save_contacts(contacts, private)
        print_green("Message delivered successfully.\n")

    def new_contact(self):
        """
        Walks a user through the process of creating a new contact.

        Returns:
            The name of the contact created (used in get_recipient()).
        """
        print_bar("NEW CONTACT")
        contacts = load_contacts(self.private)

        # Get contact information
        print("Enter the information for your new contact...")
        name = input("Name: ")
        ip = get_ip()
        fingerprint = input_default("Fingerprint", None)
        
        # Set contact start values
        counter = 0
        my_last_sign = None
        contact_last_sign = None


        # Check for duplicates
        duplicate_id = 0
        for contact_id in contacts:
            if contacts[contact_id]["name"] == name or contacts[contact_id]["ip"] == ip:
                duplicate_id = contact_id                
        
        if duplicate_id:
            print_yellow("\n--- Warning: Contact exists ---")
            print_yellow("Existing Contact:")
            display_contact(duplicate_id, contacts)

            print_yellow("\nNew Contact:")
            print_green(name)
            print("IP:", ip)
            print("Fingerprint:", fingerprint)

            if confirm("\nUpdate contact information for {}? (Y/n) ".format(contacts[duplicate_id]["name"])):
                contacts[duplicate_id]["name"] = name
                contacts[duplicate_id]["ip"] = ip
                contacts[duplicate_id]["fingerprint"] = fingerprint
                print_green("Contact updated.\n")
            else:
                print_green("Contact update cancelled.\n")
        else:
            new_id = name + ip
            contacts[new_id] = {"name": name, "ip": ip, "fingerprint": fingerprint, "messages": [], "counter": counter, "my_last_sign": my_last_sign, "contact_last_sign": contact_last_sign, "hashchain": []}
            print_green("Contact added.\n")

        save_contacts(contacts, self.private)

    
    def delete_contact(self):
        contacts = load_contacts(self.private)
        print_bar("DELETE CONTACT")
        display_messages(contacts)
        contact_id = get_recipient(contacts)
        if confirm("Are you sure you would like do delete contact information for {}? (Y/n)".format(contacts[contact_id]["name"])):
            del contacts[contact_id]
            print_green("Contact deleted.\n")
            save_contacts(contacts, self.private)
        else:
            print_red("Aborted.\n")

    
    def list_contacts(self):
        """Displays each of the contacts in the contacts file."""
        contacts = load_contacts(self.private)
        print_bar("CONTACTS LIST")
        for contact_id in contacts:
            display_contact(contact_id, contacts)


    def get_fingerprint(self):
        print_bar("PUBLIC FINGERPRINT")
        print_yellow("Copy and paste the following fingerprint into trusted channels only.\n")
        print(create_fingerprint(self.public))
        print()
    

    def clear_screen(self):
        run(["clear"])


    def display_help(self):
        """Displays a list of valid commands and their meanings."""
        print("Enter a command...")
        print("oc   -> Open Conversation")
        print("ec   -> Edit Conversation")
        print("nc   -> New/Update Contact")
        print("lc   -> List Contacts")
        print("dc   -> Delete Contact")
        print("fp   -> Display Fingerprint")
        print("c    -> Clear Screen")
        print("h    -> Display help")
        print("q    -> Quit slyther\n")

    
    def quit(self):
        """Prompts the user to exit slyther."""
        if confirm("\nExit slyther? (Y/n) "):
            exit()


    def handle_context(self, func):
        try:
            func()
        except KeyboardInterrupt:
            print("\n")


if __name__ == "__main__":
    print_banner()
    private, public, private_ecdh, public_ecdh = login()
    
    Application(public, private, public_ecdh, private_ecdh).run(),
    print_red("Exiting slyther...")

